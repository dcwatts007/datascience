---
title: "Client Report - BYU-Idaho Players and Comparing Teams"
subtitle: "Unit 2 Task 2"
author: "Daniel Watts"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
import sqlite3
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
sqlite_file = 'lahmansbaseballdb.sqlite'
# this file must be in the same location as your .qmd or .py file
con = sqlite3.connect(sqlite_file)
```

## QUESTION 1

__Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

This graph shows only people who have 100% batting average, which typically indicates a small number of At Bats, leading to a misleading graph if we were looking for the best player. 

# Include and execute your code here
```{python}
q='''
    SELECT playerID,
        H as 'Hits',
        AB as 'At Bats',
        round((H*1.0/AB),3) as 'Batting Average'
    FROM batting
    WHERE AB>1
    ORDER BY "Batting Average" DESC, "playerID" ASC
    LIMIT 5
    '''
players = pd.read_sql_query(q,con)
players

```



## QUESTION 2

__Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__  

This is a more accurate depiction of which players are good batters because they have to have been at bat a sufficient number of times to exclude outliers. Using this, we get a larger variety of averages. 

```{python}
# Include and execute your code here
q='''
    SELECT playerID,
        H as 'Hits',
        AB as 'At Bats',
        round((H*1.0/AB),3) as 'Batting Average'
    FROM batting
    WHERE AB>10
    ORDER BY "Batting Average" DESC, "playerID" ASC
    LIMIT 5
    '''
players = pd.read_sql_query(q,con)
players

```


## QUESTION 3

__Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats over their entire career, and print the top 5 results.__

Here, we refine our results to playes that have been at bat many times, further eliminating the chance that these players have gotten a good batting average by chance, and showing they have a decent amount of skill. It is noteworthy that none of these players have a 50% or greater batting average. 

```{python}
# Include and execute your code here
q='''
    SELECT playerID,
        H as 'Hits',
        AB as 'At Bats',
        round((H*1.0/AB),3) as 'Batting Average'
    FROM batting
    WHERE AB>100
    ORDER BY "Batting Average" DESC, "playerID" ASC
    LIMIT 5
    '''
players = pd.read_sql_query(q,con)
players


```